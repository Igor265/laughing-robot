// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  cart      Cart[]
  order     Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Product {
  id               String      @id @default(uuid())
  name             String
  description      String
  imageUrl         String
  technicalDetails String?
  dailyRate        Float
  weeklyRate       Float
  biweeklyRate     Float
  monthlyRate      Float
  cartItem         CartItem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  orderItem        OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  productId String
  cartId    String
  quantity  Int      @default(1)
  rateType  RateType // Tipo de locação (diária, semanal, etc.)
  products  Product  @relation(fields: [productId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  User        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  productId String
  orderId   String
  quantity  Int
  rateType  RateType
  price     Float
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RateType {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}
